from __init__ import *# -*- coding:utf-8 -*-from core import splitter, postalblackListDB = mock()when(redisfactory).getDB(1).thenReturn(blackListDB)postal.config = mock()when(postal.config).get('server', 'report').thenReturn('localhost')uuid = mock()uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'when(postal.uuid).uuid1().thenReturn(uuid)class TestPostal(unittest.TestCase):    def setUp(self):        self.devs = [{'status': 'OPEN', 'name': 'CHN-CS-2-35E', 'serialNumber': '010731235E', 'host': '221.192.149.108',                      'firstLayer': False, 'port': 21108},                     {'status': 'OPEN', 'name': 'CHN-CS-2-35F', 'serialNumber': '010731235F', 'host': '221.192.149.109',                      'firstLayer': False, 'port': 21108}]        self.queue = mock()        postal.queue = self.queue    # postal.RETRY_COUNT=2    def tearDown(self):        unstub()    def test_do_send_dir(self):        URL_LIST_ONE = [            {                'status': 'PROGRESS',                'isdir': False,                'ignore_case': False,                'id': '4e4c7b9f5bc89412ec000004',                'username': 'snda',                'url': u'http://dl.autopatch.ccgslb.net/cooler1/fuck1.jpg',                'r_id': '512ed15e414ec06479575561',                'action': 'purge',                'firstLayer': False,                'channel_code': '19297',                'layer_type': 'one',                'dev_id': '4e79a53c815c5e25fe001228',            }        ]        COMMAND_DIR_LIST_ONE = '<method name="dir_purge" sessionid="e4e2014f8d1211e18dc200247e10b29b"><action>0</action><dir>http://dl.autopatch.ccgslb.net/cooler1/fuck1.jpg</dir><report_address>localhost</report_address></method>'        DEVICES = [            {                'status': 'OPEN',                'name': 'CHN-WZ-V-3C5',                'serialNumber': '010577V3C5',                'host': '61.164.154.249',                'firstLayer': False,                'port': 21108            },            {                'status': 'OPEN',                'name': 'CNC-ZZ-3-3C2',                'serialNumber': '06037133C2',                'host': '61.158.249.2',                'firstLayer': False,                'port': 21108            }]        DOLOOP_RESULT_SUCCESS1 = [            '61.164.154.249\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<url_purge_response sessionid="089790c08e8911e1910800247e10b29b">\r\n<url_ret id="0">200</url_ret>\r\n</url_purge_response>',            '61.158.249.2\r\n<?xml version="1.0" encoding="UTF-8"?>\r\n<url_purge_response sessionid="089790c08e8911e1910800247e10b29d">\r\n<url_ret id="0">200</url_ret>\r\n</url_purge_response>'        ]        DEV_MAP = {'61.164.154.249': {'status': 'OPEN', 'name': 'CHN-WZ-V-3C5', 'serialNumber': '010577V3C5',                                      'host': '61.164.154.249', 'firstLayer': False, 'port': 21108},                   '61.158.249.2': {'status': 'OPEN', 'name': 'CNC-ZZ-3-3C2', 'serialNumber': '06037133C2',                                    'host': '61.158.249.2', 'firstLayer': False, 'port': 21108}}        DO_SEND_URL_RESULT1 = [            {                "code": 200,                "host": "61.164.154.249",                "firstLayer": False,                "name": "CHN-WZ-V-3C5"            },            {                "code": 200,                "host": "61.158.249.2",                "firstLayer": False,                "name": "CNC-ZZ-3-3C2"            }        ]        test_url_list_one = {            'status': 'PROGRESS',            'isdir': False,            'ignore_case': False,            'id': '4e4c7b9f5bc89412ec000004',            'username': 'snda',            'url': u'http://dl.autopatch.ccgslb.net/cooler1/fuck1.jpg',            'r_id': '512ed15e414ec06479575561',            'action': 'purge',            'firstLayer': False,            'channel_code': '19297',            'layer_type': 'one',            'dev_id': '4e79a53c815c5e25fe001228',        }        results = []        when(postal).getDevMapGroupByStatus(DEVICES, [test_url_list_one]).thenReturn((DEV_MAP, [], []))        when(postal).getUrlCommand(URL_LIST_ONE).thenReturn(COMMAND_DIR_LIST_ONE)        when(postal).doloop(DEVICES, COMMAND_DIR_LIST_ONE).thenReturn(DOLOOP_RESULT_SUCCESS1)        when(postal).process_loop_ret(DOLOOP_RESULT_SUCCESS1, DEV_MAP, "ret").thenReturn(results)        when(postal).retry_send(test_data.DEVICES_MAP, test_data.COMMAND_URL_LIST_ONE, []).thenReturn(False)        command = '<method name="dir_purge" sessionid="e4e2014f8d1211e18dc200247e10b29b"><action>0</action><dir>http://dl.autopatch.ccgslb.net/cooler1/fuck1.jpg</dir><report_address>localhost</report_address></method>'        when(postal).retry(DEV_MAP.values(), COMMAND_DIR_LIST_ONE, "ret").thenReturn([])        when(postal).doSend_HTTP(DEVICES, COMMAND_DIR_LIST_ONE).thenReturn(DO_SEND_URL_RESULT1, [])        try:            rslt = postal.do_send_dir(test_url_list_one, DEVICES)            verify(postal).doloop(DEVICES, COMMAND_DIR_LIST_ONE)        except:            pass            # verify(postal).getUrlCommand(test_data.URL_LIST_ONE)    def test_getCode(self):        xml = '''<?xml version="1.0" encoding="UTF-8"?>				<url_purge_response sessionid="3e1574e84d9b11e2963fbcaec50f6e14">				<url_ret id="0">200</url_ret>				</url_purge_response>'''        self.assertEqual(postal.getCodeFromXml(xml, "url_ret"), 200)        dirXml = '''<?xml version="1.0" encoding="UTF-8"?>					<dir_expire_response sessionid="794a95584d9a11e2963fbcaec50f6e14">					<ret>404</ret>					</dir_expire_response>'''        self.assertEqual(postal.getCodeFromXml(dirXml, "ret"), 404)    def test_retry(self):        when(postal).retry_send(test_data.RET_FAILURE_DEVICES_MAP, test_data.COMMAND_URL_LIST_ONE,                                "url_ret").thenReturn(False)        postal.retry(test_data.FAILURE_DEVICES, test_data.COMMAND_URL_LIST_ONE, "url_ret")        verify(postal, times(postal.RETRY_COUNT)).retry_send(test_data.RET_FAILURE_DEVICES_MAP,                                                             test_data.COMMAND_URL_LIST_ONE, "url_ret")    def test_getUrlCommand(self):        url_list = [            {"channel_code": "0005", "url": "http://www.chinacache.com/a.jpg", "action": "purge", "firstLayer": False,             "isdir": False, "id": 1, "r_id": "123"},            {"channel_code": "0005", "url": "http://www.chinacache.com/b.jpg", "action": "purge", "firstLayer": False,             "isdir": False, "id": 2, "r_id": "123"}]        uuid = mock()        uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'        when(postal.uuid).uuid1().thenReturn(uuid)        url_dict = {0: {'url': 'http://www.chinacache.com/a.jpg', 'id': 1, 'r_id': '123', "channel_code": "0005",                        "firstLayer": False, "isdir": False, 'action': 'purge'},                    1: {'url': 'http://www.chinacache.com/b.jpg', 'id': 2, 'r_id': '123', "channel_code": "0005",                        "firstLayer": False, "isdir": False, 'action': 'purge'}}        command = '<?xml version="1.0" encoding="utf-8"?><method name="url_purge" sessionid="e4e2014f8d1211e18dc200247e10b29b"><recursion>0</recursion><url_list><url id="0">http://www.chinacache.com/a.jpg</url><url id="1">http://www.chinacache.com/b.jpg</url></url_list></method>'        self.assertEquals(postal.getUrlCommand(url_list), (command))    def test_getUrlCommand_chinese(self):        urls = [{"channel_code": "0005", "url": u"http://www.chinacache.com/test.jpg?a=b&c=d", "action": "expire",                 "firstLayer": False, "isdir": False, "id": 1, "r_id": "123"},                {"channel_code": "0005", "url": "http://www.chinacache.com/b.jpg", "action": "expire",                 "firstLayer": False, "isdir": False, "id": 2, "r_id": "123"}]        uuid = mock()        uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'        when(postal.uuid).uuid1().thenReturn(uuid)        url_dict = {        0: {'url': u'http://www.chinacache.com/test.jpg?a=b&c=d', 'id': 1, 'r_id': '123', "channel_code": "0005",            "firstLayer": False, "isdir": False, 'action': 'expire'},        1: {'url': 'http://www.chinacache.com/b.jpg', 'id': 2, 'r_id': '123', "channel_code": "0005",            "firstLayer": False, "isdir": False, 'action': 'expire'}}        command = u'<?xml version="1.0" encoding="utf-8"?><method name="url_expire" sessionid="e4e2014f8d1211e18dc200247e10b29b"><recursion>0</recursion><url_list><url id="0">http://www.chinacache.com/test.jpg?a=b&amp;c=d</url><url id="1">http://www.chinacache.com/b.jpg</url></url_list></method>'        actual = postal.getUrlCommand(urls)        self.assertEquals(actual, command)    def test_getUrlCommandexpireurl(self):        urls = [            {"channel_code": "0005", "url": "http://www.chinacache.com/a.jpg", "action": "expire", "firstLayer": False,             "isdir": False, "id": 1, "r_id": "123"},            {"channel_code": "0005", "url": "http://www.chinacache.com/b.jpg", "action": "expire", "firstLayer": False,             "isdir": False, "id": 2, "r_id": "123"}]        uuid = mock()        uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'        when(postal.uuid).uuid1().thenReturn(uuid)        url_dict = {0: {'url': 'http://www.chinacache.com/a.jpg', 'id': 1, 'r_id': '123', "channel_code": "0005",                        "firstLayer": False, "isdir": False, 'action': 'expire'},                    1: {'url': 'http://www.chinacache.com/b.jpg', 'id': 2, 'r_id': '123', "channel_code": "0005",                        "firstLayer": False, "isdir": False, 'action': 'expire'}}        command = '<?xml version="1.0" encoding="utf-8"?><method name="url_expire" sessionid="e4e2014f8d1211e18dc200247e10b29b"><recursion>0</recursion><url_list><url id="0">http://www.chinacache.com/a.jpg</url><url id="1">http://www.chinacache.com/b.jpg</url></url_list></method>'        self.assertEquals(postal.getUrlCommand(urls), (command))    def test_getUrlCommandpreloadurl(self):        urls = [            {"channel_code": "0005", "url": "http://www.chinacache.com/a.jpg", "action": "purge", "firstLayer": False,             "isdir": False, "id": 1, "r_id": "123"},            {"channel_code": "0005", "url": "http://www.chinacache.com/b.jpg", "action": "preload", "firstLayer": False,             "isdir": False, "id": 2, "r_id": "123"}]        uuid = mock()        uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'        when(postal.uuid).uuid1().thenReturn(uuid)        url_dict = {0: {'url': 'http://www.chinacache.com/a.jpg', 'id': 1, 'r_id': '123', "channel_code": "0005",                        "firstLayer": False, "isdir": False, 'action': 'preload'},                    1: {'url': 'http://www.chinacache.com/b.jpg', 'id': 2, 'r_id': '123', "channel_code": "0005",                        "firstLayer": False, "isdir": False, 'action': 'preload'}}        command1 = '<?xml version="1.0" encoding="utf-8"?><method name="url_purge" sessionid="e4e2014f8d1211e18dc200247e10b29b"><recursion>0</recursion><url_list><url id="0">http://www.chinacache.com/a.jpg</url><url id="1">http://www.chinacache.com/b.jpg</url></url_list></method>'        self.assertEquals(command1, postal.getUrlCommand(urls))    def test_getDirCommand(self):        uuid = mock()        url_list = [            {"channel_code": "0005", "url": "http://www.chinacache.com/a/", "action": "purge", "firstLayer": False,             "isdir": True, "id": 1, "r_id": "123"}]        uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'        when(postal.uuid).uuid1().thenReturn(uuid)        command = '<method name="dir_purge" sessionid="e4e2014f8d1211e18dc200247e10b29b"><action>0</action><dir>http://www.chinacache.com/a/</dir><report_address>localhost</report_address></method>'        self.assertEquals(postal.getDirCommand(url_list), ('e4e2014f8d1211e18dc200247e10b29b', command))    def test_getDirCommand_withRegx(self):        uuid = mock()        url_list = [{"channel_code": "0005", "url": "http://www.chinacache.com/a/*.jpg", "action": "expire",                     "firstLayer": False, "isdir": True, "id": 1, "r_id": "123"}]        uuid.hex = 'e4e2014f8d1211e18dc200247e10b29b'        when(postal.uuid).uuid1().thenReturn(uuid)        command = '<method name="dir_expire" sessionid="e4e2014f8d1211e18dc200247e10b29b"><action>1</action><dir>http://www.chinacache.com/a/*.jpg</dir><report_address>localhost</report_address></method>'        self.assertEquals(postal.getDirCommand(url_list), ('e4e2014f8d1211e18dc200247e10b29b', command))    def test_do_send_url(self):        when(postal).getUrlCommand(test_data.URL_LIST_ONE).thenReturn(test_data.COMMAND_URL_LIST_ONE)        when(postal).doloop(test_data.DEVICES, test_data.COMMAND_URL_LIST_ONE).thenReturn(            test_data.DOLOOP_RESULT_SUCCESS)        when(postal).retry_send(test_data.DEVICES_MAP, test_data.COMMAND_URL_LIST_ONE, []).thenReturn(False)        # when(postal).retry(test_data.FAILURE_DEVICES, test_data.COMMAND_URL_LIST_ONE, "url_ret").thenReturn([])        when(postal).doSend_HTTP(test_data.DEVICES, test_data.COMMAND_URL_LIST_ONE).thenReturn(            test_data.DO_SEND_URL_RESULT, [])        rslt = postal.do_send_url(test_data.URL_LIST_ONE, test_data.DEVICES)        verify(postal).getUrlCommand(test_data.URL_LIST_ONE)        verify(postal).doloop(test_data.DEVICES, test_data.COMMAND_URL_LIST_ONE)    def test_do_send_url404(self):        when(postal).getUrlCommand(test_data.URL_LIST_ONE).thenReturn(test_data.COMMAND_URL_LIST_ONE)        when(postal).doloop(test_data.DEVICES, test_data.COMMAND_URL_LIST_ONE).thenReturn(            test_data.DOLOOP_RESULT_SUCCESS)        when(postal).retry_send(test_data.DEVICES_MAP, test_data.COMMAND_URL_LIST_ONE, []).thenReturn(True)        # when(postal).retry(test_data.FAILURE_DEVICES, test_data.COMMAND_URL_LIST_ONE, "url_ret").thenReturn([])        when(postal).doSend_HTTP(test_data.DEVICES, test_data.COMMAND_URL_LIST_ONE).thenReturn(            test_data.DO_SEND_URL_RESULT, [])        rslt = postal.do_send_url(test_data.URL_LIST_ONE, test_data.DEVICES)        verify(postal).getUrlCommand(test_data.URL_LIST_ONE)        verify(postal).doloop(test_data.DEVICES, test_data.COMMAND_URL_LIST_ONE)        self.assertEquals(rslt, test_data.DO_SEND_URL_RESULT_1)if __name__ == "__main__":    # import sys;sys.argv = ['', 'Test.testName']    unittest.main()